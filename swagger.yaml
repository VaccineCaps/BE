openapi: 3.0.0
info:
  description: |
    "This is a Documentation Rest API for Vaccine Booking from capstone project Alterra Academy, Group 46"
  version: "1.0.0"
  title: VaccineCaps
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: azkazainur@gmail.com
    
# servers:
  # Added by API Auto Mocking Plugin
  # - description: SwaggerHub API Auto Mocking
    # url: https://virtserver.swaggerhub.com/Azifaazka/VaccineCaps/1.0.0
    # note : ganti pake rest api yang udah deploy
tags:
  - name: user
    description: Operations about User
  - name: Role
    description: Operations about Role
  - name: Provinces
    description: Operations about Provinces
  - name: Cities
    description: Operations about Cities
  - name: Hospitals
    description: Operations about Hospitals
  - name: News
    description: Operations about News
  - name: Advertise
    description: Operations about Advertise
  - name: Vaccines
    description: Operations about Vaccines
  - name: Stok
    description: Operations about Vaccines_Hospital
  - name: Vaccines_Transaction
    description: Operations about Vaccines_Transaction
  - name: Certificate
    description: Operations about Certificate
  - name: Sessions
    description: Operations about Sessions
  - name: Otherperson
    description: Operations about Otherperson
  - name: Bookings
    description: Operations about Bookings
    
paths:
  /login:
    post:
      tags:
        - user
      summary: Logs user into the system
      operationId: Login
      parameters:
        - name: email
          in: query
          description: The email for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid email/password supplied

  /register:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /user:
    get:
      tags:
        - user
      summary: Get all user
      operationId: getAllUser
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
  
  /user/{id}:
    get:
      tags:
        - user
      summary: Get user by id
      operationId: getUserByID
      parameters:
        - name: id
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: UpdateUserByID
      parameters:
        - name: id
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: DeleteUserByID
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
    

  /role:
    post:
      tags:
        - Role
      summary: Create Role
      description: This can only be done by the logged in user.
      operationId: CreateRole
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        description: Created Role object
        required: true
    get:
      tags:
        - Role
      summary: Get all role
      operationId: getAllRole
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
            application/xml:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid id supplied
        '404':
          description: Role not found
  
        
  /role/{id}:
    get:
      tags:
        - Role
      summary: Get role by id
      operationId: getRoleByID
      parameters:
        - name: id
          in: path
          description: The name that needs to be fetched. Use role1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
            application/xml:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid id supplied
        '404':
          description: Role not found
    delete:
      tags:
        - Role
      summary: Delete Role
      description: This can only be done by the logged in Role.
      operationId: DeleteRoleByID
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: Role not found
  
  /cities:
    post:
      tags:
        - Cities
      summary: Create Cities
      description: create Citieses
      operationId: CreateCIties
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cities'
        description: Created cities object
        required: true
    get:
      tags:
        - Cities
      summary: Get all cities
      operationId: getAllCities
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cities'
            application/xml:
              schema:
                $ref: '#/components/schemas/Cities'
        '400':
          description: Invalid id supplied
        '404':
          description: Cities not found
  
        
  /cities/{id}:
    get:
      tags:
        - Cities
      summary: Get cities by id
      operationId: getCitiesByID
      parameters:
        - name: id
          in: path
          description: The name that needs to be fetched. Use Province1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provinces'
            application/xml:
              schema:
                $ref: '#/components/schemas/Provinces'
        '400':
          description: Invalid id supplied
        '404':
          description: Role not found
    delete:
      tags:
        - Cities
      summary: Delete Cities
      description: This can only be done by the logged in CIties.
      operationId: DeleteCitiesByID
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: Cities not found
  
  /provinces:
    post:
      tags:
        - Provinces
      summary: Create Provinces
      description: create Provinces
      operationId: CreateProvinces
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Provinces'
        description: Created provinces object
        required: true
    get:
      tags:
        - Provinces
      summary: Get all provinces
      operationId: getAllProvinces
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provinces'
            application/xml:
              schema:
                $ref: '#/components/schemas/Provinces'
        '400':
          description: Invalid id supplied
        '404':
          description: Provinces not found
  
  /Provinces/{id}:
    get:
      tags:
        - Provinces
      summary: Get provinces by id
      operationId: getProvinceByID
      parameters:
        - name: id
          in: path
          description: The name that needs to be fetched. Use Province1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provinces'
            application/xml:
              schema:
                $ref: '#/components/schemas/Provinces'
        '400':
          description: Invalid id supplied
        '404':
          description: Role not found
    delete:
      tags:
        - Provinces
      summary: Delete Province
      description: This can only be done by the logged in Provinces.
      operationId: DeleteProvincesByID
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: Provinces not found
  /hospitals:
    post:
      tags:
        - Hospitals
      summary: Create Hospitals
      description: create Hospitals
      operationId: CreateHospitals
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hospitals'
        description: Created Hospitals object
        required: true
    get:
      tags:
        - Hospitals
      summary: Get all hospitals
      operationId: getAllHospitals
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hospitals'
            application/xml:
              schema:
                $ref: '#/components/schemas/Hospitals'
        '400':
          description: Invalid id supplied
        '404':
          description: Provinces not found
  /hospitals/{id}:
    get:
      tags:
        - Hospitals
      summary: Get Hospitals by id
      operationId: getHospitalByID
      parameters:
        - name: id
          in: path
          description: The name that needs to be fetched. Use hospital1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hospitals'
            application/xml:
              schema:
                $ref: '#/components/schemas/Hospitals'
        '400':
          description: Invalid id supplied
        '404':
          description: Hospitals not found
    put:
      tags:
        - Hospitals
      summary: Update an existing Hospital
      operationId: UpdateHospitals
      parameters:
        - name: id
          in: path
          description: Update
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Hospitals not found
        '405':
          description: Validation exception
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hospitals'
        description: Update Hospitals object
        required: true
    delete:
      tags:
        - Hospitals
      summary: Delete Hospitals
      description: This can only be done on Hospitals.
      operationId: DeleteHospitalsByID
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: Hospitals not found
  
  /news:
    post:
      tags:
        - News
      summary: Create News
      description: create News
      operationId: CreateNews
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/News'
        description: Created News object
        required: true
    get:
      tags:
        - News
      summary: Get all news
      operationId: getAllNews
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
            application/xml:
              schema:
                $ref: '#/components/schemas/News'
        '400':
          description: Invalid id supplied
        '404':
          description: Provinces not found
  /news/{id}:
    get:
      tags:
        - News
      summary: Get News by id
      operationId: getNewsByID
      parameters:
        - name: id
          in: path
          description: The name that needs to be fetched. Use news1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
            application/xml:
              schema:
                $ref: '#/components/schemas/News'
        '400':
          description: Invalid id supplied
        '404':
          description: Hospitals not found
    put:
      tags:
        - News
      summary: Update an existing News
      operationId: UpdateNews
      parameters:
        - name: id
          in: path
          description: Update
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: News not found
        '405':
          description: Validation exception
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/News'
        description: Update News object
        required: true
    delete:
      tags:
        - News
      summary: Delete News
      description: This can only be done on News.
      operationId: DeleteNewsByID
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: News not found 

  /advertise:
    post:
      tags:
        - Advertise
      summary: Create Advertises
      description: create Advertise
      operationId: CreateAdvertises
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Advertise'
        description: Created Advertises object
        required: true
    get:
      tags:
        - Advertise
      summary: Get all advertises
      operationId: getAllAdvertises
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Advertise'
            application/xml:
              schema:
                $ref: '#/components/schemas/Advertise'
        '400':
          description: Invalid id supplied
        '404':
          description: Advertise not found
  /advertise/{id}:
    get:
      tags:
        - Advertise
      summary: Get Advertises by id
      operationId: getAdvertiseByID
      parameters:
        - name: id
          in: path
          description: Use advertise1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Advertise'
            application/xml:
              schema:
                $ref: '#/components/schemas/Advertise'
        '400':
          description: Invalid id supplied
        '404':
          description: Advertises not found
    put:
      tags:
        - Advertise
      summary: Update an existing Advertise
      operationId: UpdateAdvertises
      parameters:
        - name: id
          in: path
          description: Update
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Advertise not found
        '405':
          description: Validation exception
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Advertise'
        description: Update Advertise object
        required: true
    delete:
      tags:
        - Advertise
      summary: Delete Advertise
      description: This can only be done on Advertise.
      operationId: DeleteAdvertiseByID
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: Advertise not found
  
  /vaccine:
    post:
      tags:
        - Vaccines
      summary: Create Vaccine
      description: create Vaccine
      operationId: CreateVaccines
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vaccines'
        description: Created Vaccine object
        required: true
    get:
      tags:
        - Vaccines
      summary: Get all vaccines
      operationId: getAllVaccines
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vaccines'
            application/xml:
              schema:
                $ref: '#/components/schemas/Vaccines'
        '400':
          description: Invalid id supplied
        '404':
          description: Vaccine not found
  /vaccine/{id}:
    get:
      tags:
        - Vaccines
      summary: Get vaccines by id
      operationId: getVaccinesByID
      parameters:
        - name: id
          in: path
          description: Use vaccine1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vaccines'
            application/xml:
              schema:
                $ref: '#/components/schemas/Vaccines'
        '400':
          description: Invalid id supplied
        '404':
          description: Vaccines not found
    put:
      tags:
        - Vaccines
      summary: Update an existing Vaccine
      operationId: UpdateVaccines
      parameters:
        - name: id
          in: path
          description: Update
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Vaccine not found
        '405':
          description: Validation exception
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vaccines'
        description: Update  Vaccine object
        required: true
    delete:
      tags:
        - Vaccines
      summary: Delete Vaccine
      description: This can only be done on Advertise.
      operationId: DeleteVaccineByID
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: Vaccine not found
    
  /Stok:
    post:
      tags:
        - Stok
      summary: Create Vaccine_Hospital
      description: create Vaccine_Hospital
      operationId: CreateVaccine_Hospitals
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stok'
        description: Created Stok object
        required: true
  /Stok/{id_hospitals}:
    get:
      tags:
        - Stok
      summary: Get Stok by id hospital
      operationId: getStokByID
      parameters:
        - name: id_hospitals
          in: path
          description: Use Stok1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stok'
            application/xml:
              schema:
                $ref: '#/components/schemas/Stok'
        '400':
          description: Invalid id supplied
        '404':
          description: Vaccines not found
  /Stok/{id_hospitals}/{id_vaccines}:
    get:
      tags:
        - Stok
      summary: Get Stok by id hospital and vaccines
      operationId: getStokByHospitalVaccine
      parameters:
        - name: id_hospitals
          in: path
          description: Use Stok1 for testing.
          required: true
          schema:
            type: string
        - name: id_vaccines
          in: path
          description: Update
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stok'
            application/xml:
              schema:
                $ref: '#/components/schemas/Stok'
        '400':
          description: Invalid id supplied
        '404':
          description: Vaccines not found
    put:
      tags:
        - Stok
      summary: Update an existing Stok
      operationId: UpdateVaccineStok
      parameters:
        - name: id_hospitals
          in: path
          description: Update
          required: true
          schema:
            type: string
        - name: id_vaccines
          in: path
          description: Update
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Vaccine not found
        '405':
          description: Validation exception
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vaccines'
        description: Update  Vaccine object
        required: true
    delete:
      tags:
        - Stok
      summary: Delete Stok
      description: This can only be done on Stok.
      operationId: DeleteStokByID
      parameters:
        - name: id_hospitals
          in: path
          description: Update
          required: true
          schema:
            type: string
        - name: id_vaccines
          in: path
          description: Update
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: Vaccine not found
  /transaction:
    post:
      tags:
        - Vaccines_Transaction
      summary: Create Transaction
      description: create Transaction
      operationId: CreateVaccinesTransaction
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vaccines_Transaction'
        description: Created Transactions object
        required: true
  /transaction/{id_hospitals}:
    get:
      tags:
        - Vaccines_Transaction
      summary: Get Transaction by id hospital
      operationId: getTransactionByID
      parameters:
        - name: id_hospitals
          in: path
          description: Use transaction1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vaccines_Transaction'
            application/xml:
              schema:
                $ref: '#/components/schemas/Vaccines_Transaction'
        '400':
          description: Invalid id supplied
        '404':
          description: Transaction not found
  /transaction/{id_hospitals}/{id_vaccines}:
    get:
      tags:
        - Vaccines_Transaction
      summary: Get Transaction by id hospital and vaccines
      operationId: getTransactionByHospitalVaccine
      parameters:
        - name: id_hospitals
          in: path
          description: Use Transaction1 for testing.
          required: true
          schema:
            type: string
        - name: id_vaccines
          in: path
          description: Update
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vaccines_Transaction'
            application/xml:
              schema:
                $ref: '#/components/schemas/Vaccines_Transaction'
        '400':
          description: Invalid id supplied
        '404':
          description: Vaccines not found
    put:
      tags:
        - Vaccines_Transaction
      summary: Update transaction
      operationId: Update transaction
      parameters:
        - name: id_hospitals
          in: path
          description: Update
          required: true
          schema:
            type: string
        - name: id_vaccines
          in: path
          description: Update
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Transaction not found
        '405':
          description: Validation exception
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vaccines_Transaction'
        description: Update Transaction object
        required: true
    delete:
      tags:
        - Vaccines_Transaction
      summary: Delete Transaction
      description: This can only be done on Transaction.
      operationId: DeleteTransactionByID
      parameters:
        - name: id_hospitals
          in: path
          description: Update
          required: true
          schema:
            type: string
        - name: id_vaccines
          in: path
          description: Update
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: Transaction not found
  /certificate:
    post:
      tags:
        - Certificate
      summary: Create certificate
      description: create certificate
      operationId: CreateCertificates
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certificate'
        description: Created Certificate object
        required: true
    get:
      tags:
        - Certificate
      summary: Get all certificate
      operationId: getAllCertificates
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
            application/xml:
              schema:
                $ref: '#/components/schemas/Certificate'
        '400':
          description: Invalid id supplied
        '404':
          description: data not found
  /certificate/{id}:
    get:
      tags:
        - Certificate
      summary: Get by id
      operationId: getCertificateByID
      parameters:
        - name: id
          in: path
          description: Use certificate for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
            application/xml:
              schema:
                $ref: '#/components/schemas/Certificate'
        '400':
          description: Invalid id supplied
        '404':
          description: Certificates not found
    put:
      tags:
        - Certificate
      summary: Update an existing certificate
      operationId: UpdateCertificates
      parameters:
        - name: id
          in: path
          description: Update
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Certificate not found
        '405':
          description: Validation exception
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certificate'
        description: Update Certificate object
        required: true
    delete:
      tags:
        - Certificate
      summary: Delete Certificate
      description: This can only be done on Hospitals.
      operationId: DeleteCertificateByID
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: Hospitals not found
  /session:
    post:
      tags:
        - Sessions
      summary: Create session
      description: create Session Vaccine
      operationId: CreateSession
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sessions'
        description: Created Sessions object
        required: true
  /session/{id_hospitals}:
    get:
      tags:
        - Sessions
      summary: Get Sessions by id hospital
      operationId: getSessionByID
      parameters:
        - name: id_hospitals
          in: path
          description: Use session1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sessions'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sessions'
        '400':
          description: Invalid id supplied
        '404':
          description: session not found
  /session/{id_hospitals}/{id_vaccines}:
    get:
      tags:
        - Sessions
      summary: Get session by id hospital and vaccines
      operationId: getSessionByHospitalVaccine
      parameters:
        - name: id_hospitals
          in: path
          description: Use Transaction1 for testing.
          required: true
          schema:
            type: string
        - name: id_vaccines
          in: path
          description: Update
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sessions'
            application/xml:
              schema:
                $ref: '#/components/schemas/Sessions'
        '400':
          description: Invalid id supplied
        '404':
          description: Vaccines not found
    put:
      tags:
        - Sessions
      summary: Update session
      operationId: Update session
      parameters:
        - name: id_hospitals
          in: path
          description: Update
          required: true
          schema:
            type: string
        - name: id_vaccines
          in: path
          description: Update
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Transaction not found
        '405':
          description: Validation exception
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sessions'
        description: Update Session object
        required: true
    delete:
      tags:
        - Sessions
      summary: Delete Session
      description: This can only be done on Session.
      operationId: DeleteSessionByID
      parameters:
        - name: id_hospitals
          in: path
          description: Update
          required: true
          schema:
            type: string
        - name: id_vaccines
          in: path
          description: Update
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: Session not found
  /others:
    post:
      tags:
        - Otherperson
      summary: Create otherbook
      description: create otherbook
      operationId: CreateOP
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Otherperson'
        description: Created otherbook object
        required: true
    get:
      tags:
        - Otherperson
      summary: Get all otherbook
      operationId: getAllOP
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Otherperson'
            application/xml:
              schema:
                $ref: '#/components/schemas/Otherperson'
        '400':
          description: Invalid id supplied
        '404':
          description: data not found
  /others/{id}:
    get:
      tags:
        - Otherperson
      summary: Get by id
      operationId: getOPByID
      parameters:
        - name: id
          in: path
          description: Use otherbook for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Otherperson'
            application/xml:
              schema:
                $ref: '#/components/schemas/Otherperson'
        '400':
          description: Invalid id supplied
        '404':
          description: otherbook not found
    put:
      tags:
        - Otherperson
      summary: Update an existing otherbook
      operationId: UpdateOP
      parameters:
        - name: id
          in: path
          description: Update
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: otherbook not found
        '405':
          description: Validation exception
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Otherperson'
        description: Update otherbook object
        required: true
    delete:
      tags:
        - Otherperson
      summary: Delete otherbook
      description: This can only be done on otherbook.
      operationId: DeleteOPByID
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: otherbook not found
          
  /booking:
    post:
      tags:
        - Bookings
      summary: Create booking
      description: create Booking Vaccine
      operationId: CreateBooking
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bookings'
        description: Created Booking object
        required: true
    get:
      tags:
        - Bookings
      summary: Get all booking
      operationId: getAllBook
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookings'
            application/xml:
              schema:
                $ref: '#/components/schemas/Bookings'
        '400':
          description: Invalid id supplied
        '404':
          description: data not found
  /booking/{id_user}:
    get:
      tags:
        - Sessions
      summary: Get User by id user
      operationId: getBookingByIDUser
      parameters:
        - name: id_user
          in: path
          description: Use book1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookings'
            application/xml:
              schema:
                $ref: '#/components/schemas/Bookings'
        '400':
          description: Invalid id supplied
        '404':
          description: booking not found
  /booking/{id_sessions}:
    get:
      tags:
        - Bookings
      summary: Get booking by id sessions
      operationId: getBookingByIDSession
      parameters:
        - name: id_sessions
          in: path
          description: Use session1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookings'
            application/xml:
              schema:
                $ref: '#/components/schemas/Bookings'
        '400':
          description: Invalid id supplied
        '404':
          description: booking not found
          
  /booking/{id_hospitals}/{id_user}/{id_sessions}/{id_vstatus}:
    delete:
      tags:
        - Bookings
      summary: Delete Session
      description: This can only be done on Session.
      operationId: DeleteBookByID
      parameters:
        - name: id_hospitals
          in: path
          description: Update
          required: true
          schema:
            type: string
        - name: id_user
          in: path
          description: Update
          required: true
          schema:
            type: string
        - name: id_sessions
          in: path
          description: Update
          required: true
          schema:
            type: string
        - name: id_vstatus
          in: path
          description: Update
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
        '404':
          description: Session not found
    
  # /pet:
  #   post:
  #     tags:
  #       - pet
  #     summary: Add a new pet to the store
  #     operationId: addPet
  #     responses:
  #       '405':
  #         description: Invalid input
  #     security:
  #       - petstore_auth:
  #           - 'write:pets'
  #           - 'read:pets'
  #     requestBody:
  #       $ref: '#/components/requestBodies/Pet'
  #   put:
  #     tags:
  #       - pet
  #     summary: Update an existing pet
  #     operationId: updatePet
  #     responses:
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Pet not found
  #       '405':
  #         description: Validation exception
  #     security:
  #       - petstore_auth:
  #           - 'write:pets'
  #           - 'read:pets'
  #     requestBody:
  #       $ref: '#/components/requestBodies/Pet'
  # /pet/findByStatus:
  #   get:
  #     tags:
  #       - pet
  #     summary: Finds Pets by status
  #     description: Multiple status values can be provided with comma separated strings
  #     operationId: findPetsByStatus
  #     parameters:
  #       - name: status
  #         in: query
  #         description: Status values that need to be considered for filter
  #         required: true
  #         explode: true
  #         schema:
  #           type: array
  #           items:
  #             type: string
  #             enum:
  #               - available
  #               - pending
  #               - sold
  #             default: available
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Pet'
  #           application/xml:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Pet'
  #       '400':
  #         description: Invalid status value
  #     security:
  #       - petstore_auth:
  #           - 'write:pets'
  #           - 'read:pets'
  # /pet/findByTags:
  #   get:
  #     tags:
  #       - pet
  #     summary: Finds Pets by tags
  #     description: >-
  #       Muliple tags can be provided with comma separated strings. Use\ \ tag1,
  #       tag2, tag3 for testing.
  #     operationId: findPetsByTags
  #     parameters:
  #       - name: tags
  #         in: query
  #         description: Tags to filter by
  #         required: true
  #         explode: true
  #         schema:
  #           type: array
  #           items:
  #             type: string
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Pet'
  #           application/xml:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Pet'
  #       '400':
  #         description: Invalid tag value
  #     security:
  #       - petstore_auth:
  #           - 'write:pets'
  #           - 'read:pets'
  #     deprecated: true
  # '/pet/{petId}':
  #   get:
  #     tags:
  #       - pet
  #     summary: Find pet by ID
  #     description: Returns a single pet
  #     operationId: getPetById
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to return
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Pet'
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/Pet'
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Pet not found
  #     security:
  #       - api_key: []
  #   post:
  #     tags:
  #       - pet
  #     summary: Updates a pet in the store with form data
  #     operationId: updatePetWithForm
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet that needs to be updated
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '405':
  #         description: Invalid input
  #     security:
  #       - petstore_auth:
  #           - 'write:pets'
  #           - 'read:pets'
  #     requestBody:
  #       content:
  #         application/x-www-form-urlencoded:
  #           schema:
  #             type: object
  #             properties:
  #               name:
  #                 description: Updated name of the pet
  #                 type: string
  #               status:
  #                 description: Updated status of the pet
  #                 type: string
  #   delete:
  #     tags:
  #       - pet
  #     summary: Deletes a pet
  #     operationId: deletePet
  #     parameters:
  #       - name: api_key
  #         in: header
  #         required: false
  #         schema:
  #           type: string
  #       - name: petId
  #         in: path
  #         description: Pet id to delete
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Pet not found
  #     security:
  #       - petstore_auth:
  #           - 'write:pets'
  #           - 'read:pets'
  # '/pet/{petId}/uploadImage':
  #   post:
  #     tags:
  #       - pet
  #     summary: uploads an image
  #     operationId: uploadFile
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to update
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/ApiResponse'
  #     security:
  #       - petstore_auth:
  #           - 'write:pets'
  #           - 'read:pets'
  #     requestBody:
  #       content:
  #         application/octet-stream:
  #           schema:
  #             type: string
  #             format: binary
  # /store/inventory:
  #   get:
  #     tags:
  #       - store
  #     summary: Returns pet inventories by status
  #     description: Returns a map of status codes to quantities
  #     operationId: getInventory
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               additionalProperties:
  #                 type: integer
  #                 format: int32
  #     security:
  #       - api_key: []
  # /store/order:
  #   post:
  #     tags:
  #       - store
  #     summary: Place an order for a pet
  #     operationId: placeOrder
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Order'
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/Order'
  #       '400':
  #         description: Invalid Order
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/Order'
  #       description: order placed for purchasing the pet
  #       required: true
  # '/store/order/{orderId}':
  #   get:
  #     tags:
  #       - store
  #     summary: Find purchase order by ID
  #     description: >-
  #       For valid response try integer IDs with value >= 1 and <= 10.\ \ Other
  #       values will generated exceptions
  #     operationId: getOrderById
  #     parameters:
  #       - name: orderId
  #         in: path
  #         description: ID of pet that needs to be fetched
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #           minimum: 1
  #           maximum: 10
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Order'
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/Order'
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Order not found
  #   delete:
  #     tags:
  #       - store
  #     summary: Delete purchase order by ID
  #     description: >-
  #       For valid response try integer IDs with positive integer value.\ \
  #       Negative or non-integer values will generate API errors
  #     operationId: deleteOrder
  #     parameters:
  #       - name: orderId
  #         in: path
  #         description: ID of the order that needs to be deleted
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #           minimum: 1
  #     responses:
  #       '400':
  #         description: Invalid ID supplied
  #       '404':
  #         description: Order not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        password:
          type: string
        id_roles:
          type: array
          xml:
            name: role
            wrapped: true
          items:
            $ref: '#/components/schemas/Role'
      xml:
        name: User
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Role
    Provinces:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Provinces
    Cities:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        id_province:
          type: array
          xml:
            name: provinces
            wrapped: true
          items:
            $ref: '#/components/schemas/Provinces'
      xml:
        name: Cities
    Hospitals:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        address:
          type: string
        id_province:
          type: array
          xml:
            name: provinces
            wrapped: true
          items:
            $ref: '#/components/schemas/Provinces'
        id_user:
          type: array
          xml:
            name: User
            wrapped: true
          items:
            $ref: '#/components/schemas/User'
      xml:
        name: Hospitals
    News:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        context:
          type: string
        id_hospital:
          type: array
          xml:
            name: hospital
            wrapped: true
          items:
            $ref: '#/components/schemas/Hospitals'
      xml:
        name: News
    Advertise:
      type: object
      properties:
        id:
          type: integer
          format: int64
        image:
          type: string
        id_hospital:
          type: array
          xml:
            name: hospital
            wrapped: true
          items:
            $ref: '#/components/schemas/Hospitals'
      xml:
        name: Advertise
    Vaccines:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Vaccines
    Stok:
      type: object
      properties:
        id:
          type: integer
          format: int64
        Stok:
          type: integer
        id_hospitals:
          type: array
          xml:
            name: hospitals
            wrapped: true
          items:
            $ref: '#/components/schemas/Hospitals'
        id_vaccines:
          type: array
          xml:
            name: vaccines
            wrapped: true
          items:
            $ref: '#/components/schemas/Vaccines'
      xml:
        name: Stok
    Vaccines_Transaction:
      type: object
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
          enum:
            - available
            - pending
            - sold
        tanggal: 
          type: string
        no_transaction:
          type: integer
        distributor:
          type: string
        status_acc:
          type: boolean
        id_hospitals:
          type: array
          xml:
            name: hospitals
            wrapped: true
          items:
            $ref: '#/components/schemas/Hospitals'
        id_vaccines:
          type: array
          xml:
            name: vaccines
            wrapped: true
          items:
            $ref: '#/components/schemas/Vaccines'
      xml:
        name: Vaccines_Transaction
    Certificate:
      type: object
      properties:
        id:
          type: integer
          format: int64
        sertif:
          type: string
      xml:
        name: Certificate
    Sessions:
      type: object
      properties:
        id:
          type: integer
          format: int64
        waktu: 
          type: string
        max_session:
          type: integer
        jadwal:
          type: string
        id_hospitals:
          type: array
          xml:
            name: hospitals
            wrapped: true
          items:
            $ref: '#/components/schemas/Hospitals'
        id_vaccines:
          type: array
          xml:
            name: vaccines
            wrapped: true
          items:
            $ref: '#/components/schemas/Vaccines'
      xml:
        name: Sessions
        
    Otherperson:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        placeofbirth:
          type: string
        dateofbirth:
          type: string
        address:
          type: string
        phone:
          type: string
        nik: 
          type: integer
        email: 
          type: string
        vaccinestatus: 
          type: integer
        id_user:
          type: array
          xml:
            name: User
            wrapped: true
          items:
            $ref: '#/components/schemas/User'
      xml:
        name: Otherperson
    
    Bookings:
      type: object
      properties:
        id:
          type: integer
          format: int64
        booked_code: 
          type: string
        vaccine_number:
          type: string
        status:
          type: boolean
        id_hospitals:
          type: array
          xml:
            name: hospitals
            wrapped: true
          items:
            $ref: '#/components/schemas/Hospitals'
        id_sessions:
          type: array
          xml:
            name: sessions
            wrapped: true
          items:
            $ref: '#/components/schemas/Sessions'
        id_user:
          type: array
          xml:
            name: User
            wrapped: true
          items:
            $ref: '#/components/schemas/User'
        id_certificate:
          type: array
          xml:
            name: Certificate
            wrapped: true
          items:
            $ref: '#/components/schemas/Certificate'
      xml:
        name: Sessions
    
        
#-------------------------------------
    
  requestBodies:
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
        application/xml:
          schema:
            $ref: '#/components/schemas/User'
      description: User object that needs to be added
      required: true
  # securitySchemes:
  #   jwt_auth:
  #     type: oauth2
  #     flows:
  #       implicit:
  #         authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
  #         scopes:
  #           'write:item': modify items
  #           'read:item': read your items
  #   api_key:
  #     type: apiKey
  #     name: api_key
  #     in: header